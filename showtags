#!/usr/bin/env python
# vim: set ft=python ts=4 sw=4 et ai:

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

from gi.repository import Gdk
from gi.repository import Gio

import os,sys
from subprocess import check_output
from textview import TextBox
from tempfile import NamedTemporaryFile as NTF
import re
from mutagen import File
import mutagen



class MyWindow(Gtk.Window):
    rescan_flag = False

    def removables_changed(self,entry,data=None):
        remove = entry.get_text( )
        for row in self.model:
            row[2] = row[3]
            for ch in remove:
                val = row[2]
                if ch in val:
                    row[2] = val.replace(ch,'')
        
    def on_clear_btn(self,button):
        self.model.clear( )

    def on_string_entry(self,entry):
        s = entry.get_text( )
        for row in self.model:
            row[2] = row[2].replace(s,'')
        
    def do_tagging(self,widget):
        print ('tagging')
        for row in self.model:
            print (row[0])
            fpath = os.path.join(os.path.realpath(self.showpath),row[0])
            track = row[1]
            title = row[2]
            print (os.path.exists(fpath))
            if os.path.exists(fpath) and track and title:
                mf = File(fpath)
                mf['tracknumber'] = track
                mf['title'] = title
                mf.save( )
                print ('tagged!')
            
        print ('done')



    def __init__(self):
        Gtk.Window.__init__(self,title='ShowTags' )
        self.connect('destroy',Gtk.main_quit)
        
        self.mainbox = Gtk.VBox( )
        self.mainbox.set_size_request(600,860)
#        self.add(self.mainbox)
        self.tagview = TagView( )
        self.model = Model( )
        self.tagview.set_model(self.model)
        self.tagview.set_size_request(580,720)
        
        self.scrlwindow = ScrollArea( )
        self.scrlwindow.add(self.tagview)

        self.mainbox.pack_start(self.scrlwindow,True,True,6)
        self.text_button = Gtk.Button(label='Text File')
        self.text_button.connect('clicked', self.choose_txt)
        
        self.flac_button = Gtk.Button(label='FLAC folder')
        self.flac_button.connect('clicked', self.choose_folder)
        self.reload_button = Gtk.Button(label='Rescan')
        self.reload_button.connect('clicked',self.rescan)
        
        self.tagging = Gtk.Button(label='Tag')
        self.tagging.connect('clicked',self.do_tagging)
        self.tagging.set_sensitive(False)

        vbox1 = Gtk.VBox( )
        vbox2 = Gtk.VBox( )
        vbox3 = Gtk.VBox( )
        vbox1.set_size_request(200,-1)
        vbox2.set_size_request(200,-1)
        vbox3.set_size_request(200,-1)
        grid = Gtk.Grid( )
        grid.set_size_request(600,140)
        vbox2.pack_start(self.text_button,True,True,0)
        vbox2.pack_start(self.flac_button,True,True,0)
        vbox2.pack_start(self.reload_button,True,True,0)
        grid.attach(vbox1,1,1,1,2)
        grid.attach_next_to(vbox2,vbox1,Gtk.PositionType.RIGHT,2,2)
        grid.attach_next_to(vbox3,vbox2,Gtk.PositionType.RIGHT,2,2)
        self.text_button.set_sensitive(False)
        hbox = Gtk.HBox( )
        hbox.pack_start(grid,False,False,0)
        vbox1.pack_start(Gtk.Label(label='Characters to Remove from All Titles'),False,True,0)
        removables = Gtk.Entry( )
        removables.set_size_request(-1,12)
        removables.connect('changed', self.removables_changed)
        vbox1.pack_start(removables, False, True, 0)
        
        strings = Gtk.Entry( )
        strings.set_size_request(-1,12)
#        strings.connect('changed',self.strings_changed)
        strings.connect('activate',self.on_string_entry)
        vbox3.pack_start(Gtk.Label(label='Strings to Remove'),False,True,0)
        vbox3.pack_start(strings,False,True,0)
        vbox3.pack_start(self.tagging,False,True,0)

        clearall_button = Gtk.Button(label='Clear All')
#        vbox1.pack_end(clearall_button,False,True,2)
        clearall_button.connect('clicked',self.on_clear_btn)
        vbox3.pack_start(clearall_button,False,True,0)
        self.mainbox.pack_start(hbox,False,False,0)

        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stack.set_transition_duration(600)
        switcher = Gtk.StackSwitcher( )
        switcher.set_size_request(-1,-1)

        switcher.set_stack(stack)
        
        self.textbox = TextBox( )
        self.textbox.buffer.connect('changed',self.text_changed)
        stack.add_titled(self.mainbox,'mainbox','Main')
        stack.add_titled(self.textbox,'textbox','Text')
        stack.connect('notify::visible-child', self.switched)
        vbox = Gtk.VBox( )
        vbox.pack_start(switcher,False,False,2)
        vbox.pack_start(stack,True,True,0)
        self.add(vbox)
        self.stack = stack
        self.reload_button.set_sensitive(False)






    def text_changed(self,d1,d2=None):
#        print (d1)
#        print (d2)
#        print (self.stack.get_visible_child( ))
        self.rescan_flag = True
        if self.model.get_iter_first( ):
            self.tagging.set_sensitive(True)

    def switched(self,data=None,data2=None):
#        print (data)
#        print (data2)
        if self.rescan_flag:
            self.rescan_flag = False
            self.reload_button.set_sensitive(True)

    def rescan(self,data=None):
        buf = self.textbox.buffer

        text = buf.get_text(buf.get_start_iter( ),
                           buf.get_end_iter( ),
                           True)
        fp = NTF(mode='w',delete=True)
        fp.write(text)
        fp.flush( )
        tf = TitleFinder(fp.name)
        self.titles = tf.find_titles( )
        col_len = len(self.model)
        for n in range(col_len):
            self.model[n][2]=''
        for n,title in enumerate(self.titles):
            try:
                self.model[n][2]=title
                self.model[n][3]=title
            except IndexError:
                if title:
                    s = str(n+1).zfill(2)
                    self.model.append(['',s,title,title])

        fp.close( )
        self.reload_button.set_sensitive(False)

    def choose_txt(self,data):
        dialog = FileBrowser('Choose Text File')
        resp = dialog.run( )   
        if resp == Gtk.ResponseType.OK:
            fn = dialog.get_filename( )
            self.text = [fn]
            dialog.destroy( )
        else:
            dialog.destroy( )
            return
        
        tf = TitleFinder(self.text[0])
        self.titles = tf.find_titles( )
        columns = self.tagview.get_columns( )
        columns[2].set_visible(True)
        columns[1].set_visible(True)

        for n,title in enumerate(self.titles):
            title = re.sub('^\s*','',title)
            title = re.sub('\s*$','',title)
            try:
                self.model[n][2]=title
                self.model[n][3]=title
            except IndexError:
                if title:
                    s = str(n+1).zfill(2)
                    self.model.append(['',s,title,title])
        with open(self.text[0],'r') as txtfile:
            self.text = txtfile.read( )

        self.textbox.buffer.set_text(self.text)
        self.tagging.set_sensitive(True)
#        if self.rescan_flag:
#            self.rescan_flag = False
    


    def choose_folder(self,data):
        dialog = FileBrowser('Choose FLAC Folder')
        resp = dialog.run( )
        if resp == Gtk.ResponseType.OK:
            fn = dialog.get_filename( )
            self.flacs = [f for f in os.listdir(fn) if f.endswith('.flac')]
            self.flacs.sort( )
            self.showpath = fn
        else:
            dialog.destroy( )
            return
        dialog.destroy( ) 
        
        filename = Gtk.CellRendererText( )
        title = Gtk.CellRendererText( )
        number = Gtk.CellRendererText( )
        title.set_property('editable',True)
        title.connect('edited',self.on_edited)
        col = Gtk.TreeViewColumn('filenames',filename,text=0)
        col.set_sort_column_id(0)
        self.tagview.append_column(col)
        col = Gtk.TreeViewColumn('track #',number,text=1)
        col.set_visible(False)
        self.tagview.append_column(col)
        col = Gtk.TreeViewColumn('title',title,text=2)
        col.set_visible(False)
        self.tagview.append_column(col)
        self.model = self.tagview.get_model( )
        for n,flac in enumerate(self.flacs):
            if flac:
                s = str(n+1).zfill(2)
                self.model.append([flac,s,'',''])
        self.text_button.set_sensitive(True)
        self.flac_button.set_sensitive(False)

    def on_edited(self,d1=None,path=None,newtext=None):
        self.model[path][2]=newtext




MENU_XML = '''
<?xml version=1.0 encoding="UTF-8"?>
<interface>
  <menu id="popover">
    <section>
        <item>
            <attribute name="label">Insert</attribute>
            <attribute name="action">app.insert</attribute>
        </item>
        <item>
            <attribute name="label">Remove</attribute>
            <attribute name="action">app.remove</attribute>
        </item>
    </section>
  </menu>
</interface>
'''

class ScrollArea(Gtk.ScrolledWindow):
    def __init__(self):
        Gtk.ScrolledWindow.__init__(self)
        self.set_size_request(400,700)
        



class TagView(Gtk.TreeView):
    def __init__(self):
        self.tagvalues = Model( )
        Gtk.TreeView.__init__(self, model=self.tagvalues)
        self.set_size_request(320,600)
        self.limit = 40
        self.connect('button-press-event',self.on_tagview_clicked,self)

    def on_tagview_clicked(self,d1,event=None,d3=None):
        if event.type == Gdk.EventType.BUTTON_PRESS and \
                        event.button == 3:
            
            
            pthinfo = self.get_path_at_pos(event.x,event.y)
            path = pthinfo[0]
            self.get_selection( ).connect('changed',self.on_changed)
            if pthinfo != None:
                path,col,cellx,celly = pthinfo
                self.grab_focus( )
                self.set_cursor(path,col,0)
            menu = Gtk.Menu( )
            item = Gtk.MenuItem(label='Insert')
            item.connect('activate', self.on_insert)
            menu.append(item)
            item = Gtk.MenuItem(label='Remove')
            item.connect('activate', self.on_remove)
            menu.append(item)
            menu.show_all( )
            menu.popup_at_pointer( )
            return


    def on_changed(self, sel):
        print ('on_changed')
        (model,itr) = sel.get_selected( )
        self.sel = sel
        self.itr = itr
        self.vlist = []

    def on_insert(self,menuitem):
        print ('on_insert')
        model,self.sel_itr = self.sel.get_selected( )
        itr = self.sel_itr
        vlist = self.vlist
        last = len(model)
        model.append(['',str(last+1),''])
        while itr:
            value = model.get_value(itr,2)
            vlist.append(value)
            itr = model.iter_next(itr)
        itr = self.sel.get_selected( )[1]
        itr = model.iter_next(itr)
        vlist.reverse( )
        while itr:
            model[itr][2] = vlist.pop( )
            itr = model.iter_next(itr)
        itr = self.sel.get_selected( )[1]
        model[itr][2] = ''
        
    def on_remove(self,widget):
        print ('on_remove')
        model,itr = self.sel.get_selected( )
        while True:
            nxt_iter = model.iter_next(itr)
            if not nxt_iter:
                break
            model[itr][2] = model[nxt_iter][2]
            itr = nxt_iter
        model.remove(itr)

class Model(Gtk.ListStore):
    def __init__(self):
        Gtk.ListStore.__init__(self,str,str,str,str)
        
class FileBrowser(Gtk.FileChooserDialog):
    def __init__(self,title):
        if title == 'Choose FLAC Folder':
            action = Gtk.FileChooserAction.SELECT_FOLDER
            fltr = Gtk.FileFilter( )
            fltr.set_name('flac folder')
            fltr.add_mime_type('inode/directory')
            
        elif title == 'Choose Text File':
            action = Gtk.FileChooserAction.OPEN
            fltr = Gtk.FileFilter( )
            fltr.set_name('text file')
            fltr.add_mime_type('text/plain')
        
        Gtk.FileChooserDialog.__init__(self, 
                title=title,
                parent=None,
                action=action
                )
        self.set_filter(fltr)
        self.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
        self.add_buttons(Gtk.STOCK_OPEN, Gtk.ResponseType.OK)



class TitleFinder(object):
    def __init__(self,textfile_name):
        self.textfile = textfile_name
        
    def find_titles(self):
        titles = check_output(['find_titles',self.textfile])
        title_list = titles.splitlines( )
        self.titles = [title.decode( ) for title in title_list]
        del titles
        del title_list
        return self.titles









win = MyWindow( )
win.connect('destroy',Gtk.main_quit)

win.show_all( )

Gtk.main( )




